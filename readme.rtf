{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue225;\red0\green0\blue128;\red34\green136\blue32;
\red0\green128\blue0;\red128\green0\blue0;\red0\green0\blue102;\red0\green0\blue255;\red163\green21\blue21;
\red255\green0\blue0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21140\viewh19520\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Stubbie 0.1\
\
Short and sweet:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 Stubbie creates a set of test stub objects to be used in your unit tests based on your projects CFCs.\
\
Stubbie was inspired by a feature in Rails that creates stub test objects based on objects found in your application.\
\
You can run Stubbie standalone or as a plugin (there is a Mach-ii plugin available) and on execution it will recursively examine your projects code for CFCs and generate generic test objects for you, as well as a Test Suite. No more excuses to not use Unit Testing.\
\
It currently supports both CFUnit and CFCUnit.\
\
Credits:\
Special thanks must go to Stephen (Spike) Milligan for allowing me to use his CFCDoc code which allowed me to quickly build the project without having to worry about the File System and CFC parsing.\
\
Seth Petry-Johnson also deserves a special mention for allowing me to use his VarScopeChecker.cfc as part of the release so that we can all benefit from a var scope unit test.\
\
Installation:\
The simplest way to install stubbie is to just place it in your webroot, alternatively you can just create a mapping called /stubbie and point it to your install folder.\
\
Usage:\
Using stubbie requires 2 steps the first is editing config.xml and the second is calling the component.\
\
Step 1\
Open up the config.xml file and edit it the following settings\
\pard\pardeftab720\ql\qnatural

\f1\fs22 \cf2 <stubbie>\cf0 \
\
	\cf2 <config>\cf0 \
		\cf2 <appName\cf0  \cf2 value=\cf3 "myAppName"\cf0  \cf2 />\cf4 <!--\cf0  \cf4 the\cf0  \cf4 name\cf0  \cf4 of\cf0  \cf4 your\cf0  \cf4 app,\cf0  \cf4 e.g.\cf0  \cf4 the\cf0  \cf4 folder\cf0  \cf4 name\cf0  \cf4 under\cf0  \cf4 which\cf0  \cf4 the\cf0  \cf4 app\cf0  \cf4 resides\cf0 , \cf4 used\cf0  \cf4 to\cf0  \cf4 suffix\cf0  \cf4 the\cf0  \cf4 root\cf0  \cf4 path\cf0  \cf4 of\cf0  \cf4 your\cf0  \cf4 app\cf0  \cf4 -->\cf0 \
		\cf2 <appPath\cf0  \cf2 value=\cf3 "/Full/Path/To/Root/Of/Your/App"\cf0  \cf2 />\cf4 <!-- full\cf0  \cf4 path\cf0  \cf4 to\cf0  \cf4 the\cf0  \cf4 app\cf0 , \cf4 minus\cf0  \cf4 the\cf0  \cf4 app\cf0  \cf4 folder\cf0  \cf4 name\cf0  \cf4 -->\cf0 \
		\cf2 <packageRoot\cf0  \cf2 value=\cf3 "com.myDomain"\cf0  \cf2 />\cf4 <!--\cf0  \cf4 if\cf0  \cf4 you\cf0  \cf4 have\cf0  \cf4 a\cf0  \cf4 mapping\cf0  \cf4 for\cf0  \cf4 your\cf0  \cf4 app's\cf0  \cf4 cfcs,\cf0  \cf4 e.g.\cf0  \cf4 com.mydomain,\cf0  \cf4 specify\cf0  \cf4 it\cf0  \cf4 here\cf0  \cf4 -->\cf0 \
		\cf2 <saveTestFilesTo\cf0  \cf2 value=\cf3 ""\cf0  \cf2 />\cf4 <!--\cf0  \cf4 Not\cf0  \cf4 implemented\cf0  \cf4 yet,\cf0  \cf4 optional\cf0  \cf4 storage\cf0  \cf4 location\cf0  \cf4 for\cf0  \cf4 the\cf0  \cf4 test\cf0  \cf4 stubs\cf0  \cf4 -->\cf0 \
		\cf2 <unitTestFramework\cf0  \cf2 value=\cf3 "cfcUnit" \cf2 />\cf4 <!--\cf0  \cf4 cfcUnit\cf0 ,\cf4  cfUnit and mxunit are\cf0  \cf4 allowed\cf0  \cf4 options\cf0  \cf4 here\cf0  \cf4 -->\cf0 \
		\cf2 <coldSpring\cf0  \cf2 use=\cf3 "false"\cf0  \cf2 path=\cf3 "config/cs.xml"\cf0  \cf2 useMachIIColdSpring=\cf3 "false" \cf2 />\cf5 <!-- use CS to autowire to wire up the beans, if MachII app use that CS -->\cf0 \
	\cf2 </config>\cf0 \
	\
\cf2 </stubbie>
\f0\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
Step 2\
Place the following code in anywhere you wish to invoke stubbie from:\
\pard\pardeftab720\ql\qnatural

\f1\fs22 \cf6 <cfset\cf0  configFilePath = \cf7 ExpandPath\cf0 (\cf8 './config.xml'\cf0 )\cf6 />\cf0 \
\
\cf6 <cfset\cf0  stubbie = \cf7 CreateObject\cf0 (\cf8 "component"\cf0 ,\cf8 "Stubbie"\cf0 ).init(configFilePath)/\cf6 >\cf0 \
\cf6 <cfset\cf0  stubbie.build()\cf6 />\
\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 Calling the template will kick off the process. This involves the creation of a folder called 
\b test
\b0  under the appPath which in turn will hold all of the test CFCs for your project. \
\
Depending on what unit test framework you have chosen you also have a test suite created for you. If you chose the cfcUnit option you will find a 
\b AllTests.cfc
\b0  under 
\b \{appPath\}/tests/
\b0  and if you chose cfUnit you'll find 
\b cfUnitTestRunner.cfm
\b0 .\
\
Requirements:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 I have developed it and tested it on CFMX 8 and 7 but it should work just fine on CFMX 6.1.\
\
\
MXUnit\
If you wish to view the results of a MXUnit TestSuite build cease a test.cfm file like below in your test output folder:\
\
\pard\pardeftab720\ql\qnatural

\f1\fs22 \cf6 <cfparam\cf0  \cf6 name=\cf8 "url.output"\cf0  \cf6 default=\cf8 "html"\cf6 >\cf0 \
\
\cf6 <cfset\cf0  testSuite = CreateObject(\cf8 "component"\cf0 ,\cf8 "stubbie.test.AllTests"\cf0 ) \cf6 />\cf0 \
\cf6 <cfset\cf0  result = testSuite.suite() \cf6 />\cf0 \
\cf6 <cfoutput>\cf0 #result.getResultsOutput(url.output)#\cf6 </cfoutput>\cf0 \
\cf6 <cfdump\cf0  \cf6 var=\cf8 "#testSuite#"\cf0  \cf6 />\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Be sure to update the path for the test suite (here I am basing it off a build I ran for stubbie). Then simply open your browser to the location of the test.cfm file and all things being well you should see the results of your test.\
\
Mach-ii plugin\
I am assuming that you have followed the previous steps and are using a mapping called stubbie.  To add the mach-ii plugin imply add the the lines found between 
\f1\fs22 \cf5 <!-- Start stubbie plugin code --> 
\f0\fs24 \cf0 and 
\f1\fs22 \cf5  <!-- Start stubbie plugin code -->
\f0\fs24 \cf0 . This also assumes that you have a your stubby config file inside a config folder under the root of your mach-ii application.\
\
\pard\pardeftab720\ql\qnatural

\f1\fs22 \cf5 <!-- PLUGINS -->\cf0 \
\pard\pardeftab720\ql\qnatural
\cf8 <\cf9 plugins\cf8 >\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 	
\f1\fs22 \cf5 <!-- Start stubbie plugin code -->
\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\f1\fs22 \cf8 	<\cf9 plugin\cf0  \cf10 name\cf0 ="\cf8 StubbiePlugin\cf0 " \cf10 type\cf0 ="\cf8 stubbie.machii.StubbiePlugin\cf0 "\cf8 >\cf0 \
		\cf8 <\cf9 parameters\cf8 >\cf0 \
			\cf8 <\cf9 parameter\cf0  \cf10 name\cf0 ="\cf8 stubbieConfigFilePath\cf0 " \cf10 value\cf0 ="\cf8 ./config/stubbie/config.xml\cf0 " \cf8 />\cf0 \
		\cf8 </\cf9 parameters\cf8 >\cf0 \
	\cf8 </\cf9 plugin\cf8 >\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 	
\f1\fs22 \cf5 <!-- End stubbie plugin code -->
\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\f1\fs22 \cf8 </\cf9 plugins\cf8 >\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 If you are using 
\b MXUnit
\b0 , then to take full benefit of the integration between Mach-ii and ColdSpring I suggest you also set the attribute in your config.xml for
\f1\fs22  \cf2 useMachIIColdSpring\cf3  
\f0\fs24 \cf0 to true. If you choose to do so a few things will happen. For one the generator will create CFCs that hook into the ColdFusionApplication scope to find Mach-ii and try and use the 
\i\b serviceFactory
\i0\b0  as created by mach-ii (
\b NOTE 
\b0 you may need to update this value, I am working of defaults here). Secondly the code will create an additional CFC for use with MXUnit: RemoteFacade.cfc (this is required in order to access the application scope using the Eclipse plugin). Finally if you are using Eclipse for your tests you will need to update the URL for the service to point to this RemoteFacade.cfc.}